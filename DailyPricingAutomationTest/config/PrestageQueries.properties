

*****************************PriceMonitoring-1P******************************************************************
PRICETREND_EXPECTED_DATE=SELECT CURRENT_DATE() today, DATE_ADD(CURRENT_DATE(), INTERVAL -1 DAY) yesterday
PRICETREND_EXPECTED_DATE_columns=today,yesterday
DAILY_BBXWINNER=select a.product_code , case when b.Buy_box_winning_seller is null then 'NULL' else b.Buy_box_winning_seller end as bbxwinner from ( select M.product_code,cast(S.Shipped_COGS as float64) sale  from `CC_I2O_DATA_REPO.final_product_master_filtered` M left join `CC_I2O_DATA_PRE_STG.vc_sales_diagnostics_sourcing_detail` S on M.product_code =S.ASIN  where M.org_type='Amazon_1PP' and S.org_type='Amazon_1PP' and S.Reporting_Range='Weekly' and pricemonitor_enabled is true ) a  left join (SELECT Scrape_Date, product_code , Buy_box_winning_seller,buy_box_price FROM CC_I2O_DATA_REVENUE_LAKE.product_pricing_hstry_data WHERE  reporting_range ='Daily' and period=(select date_sub(CURRENT_DATE, INTERVAL 1 day) from CC_I2O_DATA_REPO.last_load_run)) b on a.product_code = b.product_code  order by  a.sale desc limit 5
DAILY_BBXWINNER_columns=product_code,bbxwinner
DAILY_BBXWINNERPRICE=select a.product_code , case when b.buy_box_price is null then 0 else b.buy_box_price end as bbxprice from ( select M.product_code,cast(S.Shipped_COGS as float64) sale  from `CC_I2O_DATA_REPO.final_product_master_filtered` M left join `CC_I2O_DATA_PRE_STG.vc_sales_diagnostics_sourcing_detail` S on M.product_code =S.ASIN  where M.org_type='Amazon_1PP' and S.org_type='Amazon_1PP' and S.Reporting_Range='Weekly' and pricemonitor_enabled is true ) a  left join (SELECT Scrape_Date, product_code , Buy_box_winning_seller,buy_box_price FROM CC_I2O_DATA_REVENUE_LAKE.product_pricing_hstry_data WHERE  reporting_range ='Daily' and period=(select date_sub(CURRENT_DATE, INTERVAL 1 day) from CC_I2O_DATA_REPO.last_load_run)) b on a.product_code = b.product_code  order by  a.sale desc limit 5
DAILY_BBXWINNERPRICE_columns=product_code,bbxprice

PAPPOPUP_EXPECTED_DATE=SELECT CURRENT_DATE() today, DATE_ADD(CURRENT_DATE(), INTERVAL -1 DAY) yesterday
PAPPOPUP_EXPECTED_DATE_columns=today,yesterday
DAILY_NEWEGG_PRICE=select a.product_code , case when b.buy_box_price is null then 0 else round(b.buy_box_price) end as bbxprice from ( select distinct  product_code,cast(S.Shipped_COGS as float64) sale, M.org_type,from `CC_I2O_DATA_REPO.final_product_master_filtered` M left join `CC_I2O_DATA_PRE_STG.vc_sales_diagnostics_sourcing_detail` S on M.product_code=S.asin where M.org_type='Amazon_1PP' and S.org_type='Amazon_1PP' and S.Reporting_Range='Weekly' and  M.pricemonitor_enabled is true ) a  left join (SELECT Scrape_Date, product_code,buy_box_price FROM CC_I2O_DATA_REVENUE_LAKE.platform_non_amazon WHERE  marketplace ='newegg' and reporting_range ='Daily' and period=(select date_sub(CURRENT_DATE, INTERVAL 1 day) from CC_I2O_DATA_REPO.last_load_run)) b on a.product_code = b.product_code where a.org_type='Amazon_1PP'  order by  a.sale desc limit 5
DAILY_NEWEGG_PRICE_columns=product_code,bbxprice
DAILY_BESTBUY_PRICE=select a.product_code , case when b.buy_box_price is null then 0 else round(b.buy_box_price) end as bbxprice from ( select distinct  product_code,cast(S.Shipped_COGS as float64) sale, M.org_type,from `CC_I2O_DATA_REPO.final_product_master_filtered` M left join `CC_I2O_DATA_PRE_STG.vc_sales_diagnostics_sourcing_detail` S on M.product_code=S.asin where M.org_type='Amazon_1PP' and S.org_type='Amazon_1PP' and S.Reporting_Range='Weekly' and  M.pricemonitor_enabled is true ) a  left join (SELECT Scrape_Date, product_code,buy_box_price FROM CC_I2O_DATA_REVENUE_LAKE.platform_non_amazon WHERE  marketplace ='bestbuy' and reporting_range ='Daily' and period=(select date_sub(CURRENT_DATE, INTERVAL 1 day) from CC_I2O_DATA_REPO.last_load_run)) b on a.product_code = b.product_code where a.org_type='Amazon_1PP'  order by  a.sale desc limit 5
DAILY_BESTBUY_PRICE_columns=product_code,bbxprice
DAILY_WALMART_PRICE=select a.product_code , case when b.buy_box_price is null then 0 else round(b.buy_box_price) end as bbxprice from ( select distinct  product_code,cast(S.Shipped_COGS as float64) sale, M.org_type,from `CC_I2O_DATA_REPO.final_product_master_filtered` M left join `CC_I2O_DATA_PRE_STG.vc_sales_diagnostics_sourcing_detail` S on M.product_code=S.asin where M.org_type='Amazon_1PP' and S.org_type='Amazon_1PP' and S.Reporting_Range='Weekly' and  M.pricemonitor_enabled is true ) a  left join (SELECT Scrape_Date, product_code,buy_box_price FROM CC_I2O_DATA_REVENUE_LAKE.platform_non_amazon WHERE  marketplace ='walmart' and reporting_range ='Daily' and period=(select date_sub(CURRENT_DATE, INTERVAL 1 day) from CC_I2O_DATA_REPO.last_load_run)) b on a.product_code = b.product_code where a.org_type='Amazon_1PP'  order by  a.sale desc limit 5
DAILY_WALMART_PRICE_columns=product_code,bbxprice
DAILY_BHPPHOTOVIDEO_PRICE=select a.product_code , case when b.buy_box_price is null then 0 else round(b.buy_box_price) end as bbxprice from ( select distinct  product_code,cast(S.Shipped_COGS as float64) sale, M.org_type,from `CC_I2O_DATA_REPO.final_product_master_filtered` M left join `CC_I2O_DATA_PRE_STG.vc_sales_diagnostics_sourcing_detail` S on M.product_code=S.asin where M.org_type='Amazon_1PP' and S.org_type='Amazon_1PP' and S.Reporting_Range='Weekly' and  M.pricemonitor_enabled is true ) a  left join (SELECT Scrape_Date, product_code,buy_box_price FROM CC_I2O_DATA_REVENUE_LAKE.platform_non_amazon WHERE  marketplace ='bhphotovideo' and reporting_range ='Daily' and period=(select date_sub(CURRENT_DATE, INTERVAL 1 day) from CC_I2O_DATA_REPO.last_load_run)) b on a.product_code = b.product_code where a.org_type='Amazon_1PP'  order by  a.sale desc limit 5
DAILY_BHPPHOTOVIDEO_PRICE_columns=product_code,bbxprice
DAILY_AMAZONBBX_PRICE=select a.product_code, case when b.price is null then 0 else price end as buy_box_price   from (select distinct M.product_code,cast(S.Shipped_COGS as float64) sale from `CC_I2O_DATA_REPO.final_product_master_filtered` M left join `CC_I2O_DATA_PRE_STG.vc_sales_diagnostics_sourcing_detail` S on M.product_code=S.asin where M.org_type='Amazon_1PP' and S.org_type='Amazon_1PP' and S.Reporting_Range='Weekly' and  M.pricemonitor_enabled is true ) a left join (SELECT product_code , round(coalesce((cast(buy_box_price  as float64)),0)) price from CC_I2O_DATA_REVENUE_LAKE.product_pricing_hstry_data  WHERE reporting_range ='Daily' and period=(select date_sub(CURRENT_DATE, INTERVAL 1 day) from CC_I2O_DATA_REPO.last_load_run)) b on a.product_code =b.product_code order by sale  desc LIMIT 5
DAILY_AMAZONBBX_PRICE_columns=product_code,buy_box_price

RESDETAILS_EXPECTED_DATE=SELECT CURRENT_DATE() today, DATE_ADD(CURRENT_DATE(), INTERVAL -1 DAY) yesterday
RESDETAILS_EXPECTED_DATE_columns=today,yesterday
LAST7_DAYS_BBXWINNER=select a.product_code, case when b.buyboxwinner is null then 0 else buyboxwinner end as buyboxwinner   from (select distinct M.product_code,cast(S.Shipped_COGS as float64) sale  from `CC_I2O_DATA_REPO.final_product_master_filtered` M left join `CC_I2O_DATA_PRE_STG.vc_sales_diagnostics_sourcing_detail` S on M.product_code=S.asin where M.org_type='Amazon_1PP' and S.org_type='Amazon_1PP' and S.Reporting_Range='Weekly' and M.pricemonitor_enabled is true ) a left join (SELECT product_code , count(distinct reseller_name ) buyboxwinner from CC_I2O_DATA_REVENUE_LAKE.reseller_hstry_data  where reporting_range='Daily' and won_buy_box='Yes' and Scrape_Date >=(SELECT  DATE_ADD(CURRENT_DATE(), INTERVAL -7 DAY) fromdate)  and scrape_date <=(select daily_load_date from CC_I2O_DATA_REPO.last_load_run) group by product_code) b on a.product_code =b.product_code order by  a.sale desc limit 5
LAST7_DAYS_BBXWINNER_columns=product_code,buyboxwinner
LAST30_DAYS_RESELLERS=select a.product_code, case when b.totalresellers is null then 0 else totalresellers end as totalresellers   from (select distinct M.product_code,cast(S.Shipped_COGS as float64) sale  from `CC_I2O_DATA_REPO.final_product_master_filtered` M left join `CC_I2O_DATA_PRE_STG.vc_sales_diagnostics_sourcing_detail` S on M.product_code=S.asin where M.org_type='Amazon_1PP' and S.org_type='Amazon_1PP' and S.Reporting_Range='Weekly' and M.pricemonitor_enabled is true ) a left join (SELECT product_code , count(distinct Reseller_Name) totalresellers  from CC_I2O_DATA_REVENUE_LAKE.reseller_hstry_data  where  reporting_range='Daily' and Scrape_Date >=(SELECT  DATE_ADD(CURRENT_DATE(), INTERVAL -31 DAY) fromdate)  and scrape_date <=(select daily_load_date from CC_I2O_DATA_REPO.last_load_run) group by product_code) b on a.product_code =b.product_code order by  a.sale desc limit 5
LAST30_DAYS_RESELLERS_columns=product_code,totalresellers
LAST7_DAYS_LOWALERTCOUNT=select a.product_code,case when b.lowalert is null then 0 else lowalert end as lowalert from (select distinct product_code,cast(S.Shipped_COGS as float64) sale  from `CC_I2O_DATA_REPO.final_product_master_filtered` M left join `CC_I2O_DATA_PRE_STG.vc_sales_diagnostics_sourcing_detail` S on M.product_code = S.asin  where M.org_type='Amazon_1PP' and S.org_type='Amazon_1PP' and S.Reporting_Range='Weekly' and M.pricemonitor_enabled is true ) a left join (select product_code,count(distinct reseller_name) lowalert from (SELECT A.product_code ,coalesce (A.Reseller_Price,0) Reseller_Price, coalesce (cast(B.lpl as float64),0) lpl , coalesce( cast(B.MAP as float64),0) map ,A.reseller_name  reseller_name, FROM CC_I2O_DATA_REVENUE_LAKE.reseller_hstry_data A left  join CC_I2O_DATA_REPO.asin_map_master B on A.input_asin =B.asin   left  join `CC_I2O_DATA_REPO.final_product_master_filtered` M on A.asin =M.product_code   where A.reporting_range ='Daily' and  A.reseller_condition='New' and Scrape_Date >=(SELECT  DATE_ADD(CURRENT_DATE(), INTERVAL -7 DAY) fromdate)  and scrape_date <=(select daily_load_date from CC_I2O_DATA_REPO.last_load_run) and M.org_type ='Amazon_1PP' ) where ( Reseller_Price < cast(lpl   as float64) or  Reseller_Price < cast(map   as float64)) group by product_code) b on a.product_code=b.product_code order by sale  desc limit 5
LAST7_DAYS_LOWALERTCOUNT_columns=product_code,lowalert
LAST30_DAYS_LOWALERTCOUNT=select a.product_code,case when b.lowalert is null then 0 else lowalert end as lowalert from (select distinct product_code,cast(S.Shipped_COGS as float64) sale  from `CC_I2O_DATA_REPO.final_product_master_filtered` M left join `CC_I2O_DATA_PRE_STG.vc_sales_diagnostics_sourcing_detail` S on M.product_code = S.asin  where M.org_type='Amazon_1PP' and S.org_type='Amazon_1PP' and S.Reporting_Range='Weekly' and M.pricemonitor_enabled is true ) a left join (select product_code,count(distinct reseller_name) lowalert from (SELECT A.product_code ,coalesce (A.Reseller_Price,0) Reseller_Price, coalesce (cast(B.lpl as float64),0) lpl , coalesce( cast(B.MAP as float64),0) map ,A.reseller_name  reseller_name, FROM CC_I2O_DATA_REVENUE_LAKE.reseller_hstry_data A left  join CC_I2O_DATA_REPO.asin_map_master B on A.input_asin =B.asin   left  join `CC_I2O_DATA_REPO.final_product_master_filtered` M on A.asin =M.product_code   where A.reporting_range ='Daily' and  A.reseller_condition='New' and Scrape_Date >=(SELECT  DATE_ADD(CURRENT_DATE(), INTERVAL -31 DAY) fromdate)  and scrape_date <=(select daily_load_date from CC_I2O_DATA_REPO.last_load_run) and M.org_type ='Amazon_1PP' ) where ( Reseller_Price < cast(lpl   as float64) or  Reseller_Price < cast(map   as float64)) group by product_code) b on a.product_code=b.product_code order by sale  desc limit 5
LAST30_DAYS_LOWALERTCOUNT_columns=product_code,lowalert

RESOFF_EXPECTED_DATE=SELECT CURRENT_DATE() today, DATE_ADD(CURRENT_DATE(), INTERVAL -1 DAY) yesterday
RESOFF_EXPECTED_DATE_columns=today,yesterday
DAILY_LISTING_RESELLEROFFERS=select product_code,count(reseller_name ) offers from( select product_code product_code  ,scrape_date, reseller_name,sale from (SELECT A.product_code product_code,scrape_Date,A.Reseller_Price Reseller_Price,A.reseller_name  reseller_name,cast(S.Shipped_COGS as float64) sale  FROM CC_I2O_DATA_REVENUE_LAKE.reseller_hstry_data A left join `CC_I2O_DATA_REPO.final_product_master_filtered` M on A.product_code=M.product_code left join `CC_I2O_DATA_PRE_STG.vc_sales_diagnostics_sourcing_detail` S on M.product_code=S.asin where M.org_type='Amazon_1PP' and S.org_type='Amazon_1PP' and S.Reporting_Range='Weekly' and M.pricemonitor_enabled is true and A.reporting_range ='Daily' and A.reseller_condition ='New' and Scrape_Date =(SELECT  DATE_ADD(CURRENT_DATE(), INTERVAL -1 DAY) fromdate)  ) ) group by product_code,sale order by sale desc limit 5
DAILY_LISTING_RESELLEROFFERS_columns=product_code,offers

PAP_EXPECTED_DATE=SELECT CURRENT_DATE() today, DATE_ADD(CURRENT_DATE(), INTERVAL -1 DAY) yesterday
PAP_EXPECTED_DATE_columns=today,yesterday
PAP_NEWEGG_PRICE=select a.product_code , case when b.buy_box_price is null then 0 else round(b.buy_box_price) end as bbxprice from ( select distinct  product_code,cast(S.Shipped_COGS as float64) sale, M.org_type,from `CC_I2O_DATA_REPO.final_product_master_filtered` M left join `CC_I2O_DATA_PRE_STG.vc_sales_diagnostics_sourcing_detail` S on M.product_code=S.asin where M.org_type='Amazon_1PP' and S.org_type='Amazon_1PP' and S.Reporting_Range='Weekly' and  M.multiplatform_enabled  is true ) a  left join (SELECT Scrape_Date, product_code,buy_box_price FROM CC_I2O_DATA_REVENUE_LAKE.platform_non_amazon WHERE  marketplace ='newegg' and reporting_range ='Daily' and period=(select date_sub(CURRENT_DATE, INTERVAL 1 day) from CC_I2O_DATA_REPO.last_load_run)) b on a.product_code = b.product_code where a.org_type='Amazon_1PP'  order by  a.sale desc limit 5
PAP_NEWEGG_PRICE_columns=product_code,bbxprice
PAP_BESTBUY_PRICE=select a.product_code , case when b.buy_box_price is null then 0 else round(b.buy_box_price) end as bbxprice from ( select distinct  product_code,cast(S.Shipped_COGS as float64) sale, M.org_type,from `CC_I2O_DATA_REPO.final_product_master_filtered` M left join `CC_I2O_DATA_PRE_STG.vc_sales_diagnostics_sourcing_detail` S on M.product_code=S.asin where M.org_type='Amazon_1PP' and S.org_type='Amazon_1PP' and S.Reporting_Range='Weekly' and  M.multiplatform_enabled  is true ) a  left join (SELECT Scrape_Date, product_code,buy_box_price FROM CC_I2O_DATA_REVENUE_LAKE.platform_non_amazon WHERE  marketplace ='bestbuy' and reporting_range ='Daily' and period=(select date_sub(CURRENT_DATE, INTERVAL 1 day) from CC_I2O_DATA_REPO.last_load_run)) b on a.product_code = b.product_code where a.org_type='Amazon_1PP'  order by  a.sale desc limit 5
PAP_BESTBUY_PRICE_columns=product_code,bbxprice
PAP_WALMART_PRICE=select a.product_code , case when b.buy_box_price is null then 0 else round(b.buy_box_price) end as bbxprice from ( select distinct  product_code,cast(S.Shipped_COGS as float64) sale, M.org_type,from `CC_I2O_DATA_REPO.final_product_master_filtered` M left join `CC_I2O_DATA_PRE_STG.vc_sales_diagnostics_sourcing_detail` S on M.product_code=S.asin where M.org_type='Amazon_1PP' and S.org_type='Amazon_1PP' and S.Reporting_Range='Weekly' and  M.multiplatform_enabled  is true ) a  left join (SELECT Scrape_Date, product_code,buy_box_price FROM CC_I2O_DATA_REVENUE_LAKE.platform_non_amazon WHERE  marketplace ='walmart' and reporting_range ='Daily' and period=(select date_sub(CURRENT_DATE, INTERVAL 1 day) from CC_I2O_DATA_REPO.last_load_run)) b on a.product_code = b.product_code where a.org_type='Amazon_1PP'  order by  a.sale desc limit 5
PAP_WALMART_PRICE_columns=product_code,bbxprice
PAP_BHPPHOTOVIDEO_PRICE=select a.product_code , case when b.buy_box_price is null then 0 else round(b.buy_box_price) end as bbxprice from ( select distinct  product_code,cast(S.Shipped_COGS as float64) sale, M.org_type,from `CC_I2O_DATA_REPO.final_product_master_filtered` M left join `CC_I2O_DATA_PRE_STG.vc_sales_diagnostics_sourcing_detail` S on M.product_code=S.asin where M.org_type='Amazon_1PP' and S.org_type='Amazon_1PP' and S.Reporting_Range='Weekly' and  M.multiplatform_enabled  is true ) a  left join (SELECT Scrape_Date, product_code,buy_box_price FROM CC_I2O_DATA_REVENUE_LAKE.platform_non_amazon WHERE  marketplace ='bhphotovideo' and reporting_range ='Daily' and period=(select date_sub(CURRENT_DATE, INTERVAL 1 day) from CC_I2O_DATA_REPO.last_load_run)) b on a.product_code = b.product_code where a.org_type='Amazon_1PP'  order by  a.sale desc limit 5
PAP_BHPPHOTOVIDEO_PRICE_columns=product_code,bbxprice
PAP_AMAZON_PRICE=select a.product_code, case when b.price is null then 0 else price end as amazonprice   from (select distinct  M.product_code,cast(S.Shipped_COGS as float64) sale  from  `CC_I2O_DATA_REPO.final_product_master_filtered` M left join `CC_I2O_DATA_PRE_STG.vc_sales_diagnostics_sourcing_detail` S on M.product_code=S.asin where M.org_type='Amazon_1PP' and S.org_type='Amazon_1PP' and S.Reporting_Range='Weekly' and M.pricemonitor_enabled is true ) a left join (SELECT product_code , round((cast(reseller_price  as float64))) price from CC_I2O_DATA_REVENUE_LAKE.reseller_hstry_data  where  period=(select date_sub(CURRENT_DATE, INTERVAL 1 day)) and reporting_range='Daily' and Reseller_Name='Amazon.com') b on a.product_code =b.product_code order by sale desc limit 5
PAP_AMAZON_PRICE_columns=product_code,amazonprice
PAP_AMAZONBBX_PRICE=select a.product_code, case when b.price is null then 0 else price end as buy_box_price   from (select distinct M.product_code,cast(S.Shipped_COGS as float64) sale from `CC_I2O_DATA_REPO.final_product_master_filtered` M left join `CC_I2O_DATA_PRE_STG.vc_sales_diagnostics_sourcing_detail` S on M.product_code=S.asin where M.org_type='Amazon_1PP' and S.org_type='Amazon_1PP' and S.Reporting_Range='Weekly' and  M.multiplatform_enabled  is true ) a left join (SELECT product_code , round(coalesce((cast(buy_box_price  as float64)),0)) price from CC_I2O_DATA_REVENUE_LAKE.product_pricing_hstry_data  WHERE reporting_range ='Daily' and period=(select date_sub(CURRENT_DATE, INTERVAL 1 day) from CC_I2O_DATA_REPO.last_load_run)) b on a.product_code =b.product_code order by  sale desc LIMIT 5
PAP_AMAZONBBX_PRICE_columns=product_code,buy_box_price

UNSCRAPED_EXPECTED_DATE=SELECT CURRENT_DATE() today, DATE_ADD(CURRENT_DATE(), INTERVAL -1 DAY) yesterday
UNSCRAPED_EXPECTED_DATE_columns=today,yesterday
DAILY_SCRAPPED=SELECT distinct A.product_code,count(distinct A.marketplace) scrapecount  FROM CC_I2O_DATA_REVENUE_LAKE.platform_non_amazon A left join `CC_I2O_DATA_REPO.final_product_master_filtered` M on A.product_code =M.product_code   where M.org_type='Amazon_1PP' and  A.period=(select date_sub(CURRENT_DATE, INTERVAL 1 day)) and A.reporting_range='Daily' and M.multiplatform_enabled is true and A.product_code is not null group by product_code,scrape_date  order by  product_code asc limit 5
DAILY_SCRAPPED_columns=product_code,scrapecount
DAILY_UNSCRAPPED=SELECT distinct A.product_code,4-count(distinct A.marketplace) unscrapecount  FROM CC_I2O_DATA_REVENUE_LAKE.platform_non_amazon A left join `CC_I2O_DATA_REPO.final_product_master_filtered` M on A.product_code =M.product_code   where M.org_type='Amazon_1PP' and  A.period=(select date_sub(CURRENT_DATE, INTERVAL 1 day)) and A.reporting_range='Daily' and M.multiplatform_enabled is true and A.product_code is not null group by product_code,scrape_date  order by  product_code asc limit 5
DAILY_UNSCRAPPED_columns=product_code,unscrapecount



*****************************PriceMonitoring-3P******************************************************************

PRICETREND_EXPECTED_DATE3P=SELECT CURRENT_DATE() today, DATE_ADD(CURRENT_DATE(), INTERVAL -1 DAY) yesterday
PRICETREND_EXPECTED_DATE3P_columns=today,yesterday
DAILY_BBXWINNER3P=select distinct  a.product_code , case when b.Buy_box_winning_seller is null then 'NULL' else b.Buy_box_winning_seller end as bbxwinner from ( select distinct product_code from `CC_I2O_DATA_REPO.final_product_master_filtered` where org_type='Amazon_3P' and pricemonitor_enabled is true ) a  left join (SELECT distinct  Scrape_Date, product_code , Buy_box_winning_seller,buy_box_price FROM CC_I2O_DATA_REVENUE_LAKE.product_pricing_hstry_data WHERE  reporting_range ='Daily' and period=(select date_sub(CURRENT_DATE, INTERVAL 1 day) from CC_I2O_DATA_REPO.last_load_run)) b on a.product_code = b.product_code  order by  product_code asc limit 5
DAILY_BBXWINNER3P_columns=product_code,bbxwinner
DAILY_BBXWINNERPRICE3P=select distinct a.product_code , case when b.buy_box_price is null then 0 else round(b.buy_box_price) end as bbxprice from ( select distinct product_code from `CC_I2O_DATA_REPO.final_product_master_filtered` where org_type='Amazon_3P' and pricemonitor_enabled is true ) a  left join (SELECT distinct product_code ,Scrape_Date, Buy_box_winning_seller,buy_box_price FROM CC_I2O_DATA_REVENUE_LAKE.product_pricing_hstry_data WHERE reporting_range ='Daily' and period=(select date_sub(CURRENT_DATE, INTERVAL 1 day) from CC_I2O_DATA_REPO.last_load_run)) b on a.product_code = b.product_code  order by  product_code asc limit 5
DAILY_BBXWINNERPRICE3P_columns=product_code,bbxprice

PAPPOPUP_EXPECTED_DATE3P=SELECT CURRENT_DATE() today, DATE_ADD(CURRENT_DATE(), INTERVAL -1 DAY) yesterday
PAPPOPUP_EXPECTED_DATE3P_columns=today,yesterday
DAILY_NEWEGG_PRICE3P=select a.product_code , case when b.buy_box_price is null then 0 else round(b.buy_box_price) end as bbxprice from ( select distinct  product_code, org_type,from `CC_I2O_DATA_REPO.final_product_master_filtered` where org_type='Amazon_3P' and pricemonitor_enabled   is true ) a  left join (SELECT Scrape_Date, product_code,buy_box_price FROM CC_I2O_DATA_REVENUE_LAKE.platform_non_amazon WHERE  marketplace ='newegg' and reporting_range ='Daily' and period=(select date_sub(CURRENT_DATE, INTERVAL 1 day) from CC_I2O_DATA_REPO.last_load_run)) b on a.product_code = b.product_code where a.org_type='Amazon_3P'  order by  buy_box_price  desc limit 5
DAILY_NEWEGG_PRICE3P_columns=product_code,bbxprice
DAILY_BESTBUY_PRICE3P=select a.product_code , case when b.buy_box_price is null then 0 else round(b.buy_box_price) end as bbxprice from ( select distinct  product_code, org_type,from `CC_I2O_DATA_REPO.final_product_master_filtered` where org_type='Amazon_3P' and pricemonitor_enabled   is true ) a  left join (SELECT Scrape_Date, product_code,buy_box_price FROM CC_I2O_DATA_REVENUE_LAKE.platform_non_amazon WHERE  marketplace ='bestbuy' and reporting_range ='Daily' and period=(select date_sub(CURRENT_DATE, INTERVAL 1 day) from CC_I2O_DATA_REPO.last_load_run)) b on a.product_code = b.product_code where a.org_type='Amazon_3P'  order by  buy_box_price  desc limit 5
DAILY_BESTBUY_PRICE3P_columns=product_code,bbxprice
DAILY_WALMART_PRICE3P=select a.product_code , case when b.buy_box_price is null then 0 else round(b.buy_box_price) end as bbxprice from ( select distinct  product_code, org_type,from `CC_I2O_DATA_REPO.final_product_master_filtered` where org_type='Amazon_3P' and pricemonitor_enabled   is true ) a  left join (SELECT Scrape_Date, product_code,buy_box_price FROM CC_I2O_DATA_REVENUE_LAKE.platform_non_amazon WHERE  marketplace ='walmart' and reporting_range ='Daily' and period=(select date_sub(CURRENT_DATE, INTERVAL 1 day) from CC_I2O_DATA_REPO.last_load_run)) b on a.product_code = b.product_code where a.org_type='Amazon_3P'  order by  buy_box_price  desc limit 5
DAILY_WALMART_PRICE3P_columns=product_code,bbxprice
DAILY_BHPPHOTOVIDEO_PRICE3P=select a.product_code , case when b.buy_box_price is null then 0 else round(b.buy_box_price) end as bbxprice from ( select distinct  product_code, org_type,from `CC_I2O_DATA_REPO.final_product_master_filtered` where org_type='Amazon_3P' and pricemonitor_enabled   is true ) a  left join (SELECT Scrape_Date, product_code,buy_box_price FROM CC_I2O_DATA_REVENUE_LAKE.platform_non_amazon WHERE  marketplace ='phphotovideo' and reporting_range ='Daily' and period=(select date_sub(CURRENT_DATE, INTERVAL 1 day) from CC_I2O_DATA_REPO.last_load_run)) b on a.product_code = b.product_code where a.org_type='Amazon_3P'  order by  buy_box_price  desc limit 5
DAILY_BHPPHOTOVIDEO_PRICE3P_columns=product_code,bbxprice
DAILY_AMAZONBBX_PRICE3P=select a.product_code, case when b.price is null then 0 else price end as buy_box_price   from (select distinct product_code from `CC_I2O_DATA_REPO.final_product_master_filtered`   where org_type ='Amazon_3P' AND pricemonitor_enabled is true ) a left join (SELECT product_code , round(coalesce((cast(buy_box_price  as float64)),0)) price from CC_I2O_DATA_REVENUE_LAKE.product_pricing_hstry_data  WHERE reporting_range ='Daily' and period=(select date_sub(CURRENT_DATE, INTERVAL 1 day) from CC_I2O_DATA_REPO.last_load_run)) b on a.product_code =b.product_code order by price desc LIMIT 5
DAILY_AMAZONBBX_PRICE3P_columns=product_code,buy_box_price

RESDETAILS_EXPECTED_DATE3P=SELECT CURRENT_DATE() today, DATE_ADD(CURRENT_DATE(), INTERVAL -1 DAY) yesterday
RESDETAILS_EXPECTED_DATE3P_columns=today,yesterday
LAST7_DAYS_BBXWINNER3P=select a.product_code, case when b.buyboxwinner is null then 0 else buyboxwinner end as buyboxwinner   from (select distinct product_code from `CC_I2O_DATA_REPO.final_product_master_filtered` where org_type='Amazon_3P' and pricemonitor_enabled is true ) a left join (SELECT product_code , count(distinct reseller_name ) buyboxwinner from CC_I2O_DATA_REVENUE_LAKE.reseller_hstry_data  where reporting_range='Daily' and won_buy_box='Yes' and Scrape_Date >=(SELECT  DATE_ADD(CURRENT_DATE(), INTERVAL -7 DAY) fromdate)  and scrape_date <=(select daily_load_date from CC_I2O_DATA_REPO.last_load_run) group by product_code) b on a.product_code =b.product_code order by buyboxwinner desc limit 5
LAST7_DAYS_BBXWINNER3P_columns=product_code,buyboxwinner
LAST30_DAYS_RESELLERS3P=select a.product_code, case when b.totalresellers is null then 0 else totalresellers end as totalresellers   from (select distinct  product_code from `CC_I2O_DATA_REPO.final_product_master_filtered` where org_type='Amazon_3P' and pricemonitor_enabled is true ) a left join (SELECT product_code , count(distinct Reseller_Name) totalresellers  from CC_I2O_DATA_REVENUE_LAKE.reseller_hstry_data  where  reporting_range='Daily' and Scrape_Date >=(SELECT  DATE_ADD(CURRENT_DATE(), INTERVAL -31 DAY) fromdate)  and scrape_date <=(select daily_load_date from CC_I2O_DATA_REPO.last_load_run) group by product_code) b on a.product_code =b.product_code order by totalresellers  desc limit 5
LAST30_DAYS_RESELLERS3P_columns=product_code,totalresellers
LAST7_DAYS_LOWALERTCOUNT3P=select a.product_code,case when b.lowalert is null then 0 else lowalert end as lowalert from (select distinct product_code from `CC_I2O_DATA_REPO.final_product_master_filtered`  where org_type ='Amazon_3P' and pricemonitor_enabled is true ) a left join (select product_code,count(distinct reseller_name) lowalert from (SELECT A.product_code ,coalesce (A.Reseller_Price,0) Reseller_Price, coalesce (cast(B.lpl as float64),0) lpl , coalesce( cast(B.MAP as float64),0) map ,A.reseller_name  reseller_name, FROM CC_I2O_DATA_REVENUE_LAKE.reseller_hstry_data A left  join CC_I2O_DATA_REPO.asin_map_master B on A.input_asin =B.asin   left  join `CC_I2O_DATA_REPO.final_product_master_filtered` M on A.asin =M.product_code   where  A.reseller_condition='New' and Scrape_Date >=(SELECT  DATE_ADD(CURRENT_DATE(), INTERVAL -7 DAY) fromdate)  and scrape_date <=(select daily_load_date from CC_I2O_DATA_REPO.last_load_run) and M.org_type ='Amazon_3P'  and A.reseller_condition='New') where ( Reseller_Price < cast(lpl   as float64) or  Reseller_Price < cast(map   as float64)) group by product_code) b on a.product_code=b.product_code order by lowalert desc limit 5
LAST7_DAYS_LOWALERTCOUNT3P_columns=product_code,lowalert
LAST30_DAYS_LOWALERTCOUNT3P=select a.product_code,case when b.lowalert is null then 0 else lowalert end as lowalert from (select distinct product_code from `CC_I2O_DATA_REPO.final_product_master_filtered`  where org_type ='Amazon_3P' and pricemonitor_enabled is true ) a left join (select product_code,count(distinct reseller_name) lowalert from (SELECT A.product_code ,coalesce (A.Reseller_Price,0) Reseller_Price, coalesce (cast(B.lpl as float64),0) lpl , coalesce( cast(B.MAP as float64),0) map ,A.reseller_name  reseller_name, FROM CC_I2O_DATA_REVENUE_LAKE.reseller_hstry_data A left  join CC_I2O_DATA_REPO.asin_map_master B on A.input_asin =B.asin   left  join `CC_I2O_DATA_REPO.final_product_master_filtered` M on A.asin =M.product_code   where  A.reseller_condition='New' and Scrape_Date >=(SELECT  DATE_ADD(CURRENT_DATE(), INTERVAL -31 DAY) fromdate)  and scrape_date <=(select daily_load_date from CC_I2O_DATA_REPO.last_load_run) and M.org_type ='Amazon_3P'  and A.reseller_condition='New') where ( Reseller_Price < cast(lpl   as float64) or  Reseller_Price < cast(map   as float64)) group by product_code) b on a.product_code=b.product_code order by lowalert desc limit 5
LAST30_DAYS_LOWALERTCOUNT3P_columns=product_code,lowalert

RESOFF_EXPECTED_DATE3P=SELECT CURRENT_DATE() today, DATE_ADD(CURRENT_DATE(), INTERVAL -1 DAY) yesterday
RESOFF_EXPECTED_DATE3P_columns=today,yesterday
DAILY_LISTING_RESELLEROFFERS3P=select product_code,count(reseller_name ) offers from( select product_code product_code  ,scrape_date, reseller_name from (SELECT A.product_code product_code,scrape_Date,A.Reseller_Price Reseller_Price,B.lpl lpl ,B.MAP map,A.reseller_name  reseller_name FROM CC_I2O_DATA_REVENUE_LAKE.reseller_hstry_data A left outer join CC_I2O_DATA_REPO.asin_map_master B on A.input_asin =B.asin left join `CC_I2O_DATA_REPO.final_product_master_filtered` M on A.product_code=M.product_code   where M.org_type='Amazon_3P' and M.pricemonitor_enabled is true and A.reporting_range ='Daily' and A.reseller_condition ='New' and Scrape_Date =(SELECT  DATE_ADD(CURRENT_DATE(), INTERVAL -1 DAY) fromdate)  )) group by product_code order by offers desc limit 5
DAILY_LISTING_RESELLEROFFERS3P_columns=product_code,offers

PAP_EXPECTED_DATE3P=SELECT CURRENT_DATE() today, DATE_ADD(CURRENT_DATE(), INTERVAL -1 DAY) yesterday
PAP_EXPECTED_DATE3P_columns=today,yesterday
PAP_NEWEGG_PRICE3P=select a.product_code , case when b.buy_box_price is null then 0 else round(b.buy_box_price) end as bbxprice from ( select distinct  product_code, org_type,from `CC_I2O_DATA_REPO.final_product_master_filtered` where org_type='Amazon_3P' and multiplatform_enabled is true ) a  left join (SELECT Scrape_Date, product_code,buy_box_price FROM CC_I2O_DATA_REVENUE_LAKE.platform_non_amazon WHERE  marketplace ='newegg' and reporting_range ='Daily' and period=(select date_sub(CURRENT_DATE, INTERVAL 1 day) from CC_I2O_DATA_REPO.last_load_run)) b on a.product_code = b.product_code where a.org_type='Amazon_3P'  order by  buy_box_price  desc limit 5
PAP_NEWEGG_PRICE3P_columns=product_code,bbxprice
PAP_BESTBUY_PRICE3P=select a.product_code , case when b.buy_box_price is null then 0 else round(b.buy_box_price) end as bbxprice from ( select distinct  product_code, org_type,from `CC_I2O_DATA_REPO.final_product_master_filtered` where org_type='Amazon_3P' and multiplatform_enabled is true ) a  left join (SELECT Scrape_Date, product_code,buy_box_price FROM CC_I2O_DATA_REVENUE_LAKE.platform_non_amazon WHERE  marketplace ='bestbuy' and reporting_range ='Daily' and period=(select date_sub(CURRENT_DATE, INTERVAL 1 day) from CC_I2O_DATA_REPO.last_load_run)) b on a.product_code = b.product_code where a.org_type='Amazon_3P'  order by  buy_box_price  desc limit 5
PAP_BESTBUY_PRICE3P_columns=product_code,bbxprice
PAP_WALMART_PRICE3P=select a.product_code , case when b.buy_box_price is null then 0 else round(b.buy_box_price) end as bbxprice from ( select distinct  product_code, org_type,from `CC_I2O_DATA_REPO.final_product_master_filtered` where org_type='Amazon_3P' and multiplatform_enabled is true ) a  left join (SELECT Scrape_Date, product_code,buy_box_price FROM CC_I2O_DATA_REVENUE_LAKE.platform_non_amazon WHERE  marketplace ='walmart' and reporting_range ='Daily' and period=(select date_sub(CURRENT_DATE, INTERVAL 1 day) from CC_I2O_DATA_REPO.last_load_run)) b on a.product_code = b.product_code where a.org_type='Amazon_3P'  order by  buy_box_price  desc limit 5
PAP_WALMART_PRICE3P_columns=product_code,bbxprice
PAP_BHPPHOTOVIDEO_PRICE3P=select a.product_code , case when b.buy_box_price is null then 0 else round(b.buy_box_price) end as bbxprice from ( select distinct  product_code, org_type,from `CC_I2O_DATA_REPO.final_product_master_filtered` where org_type='Amazon_3P' and multiplatform_enabled is true ) a  left join (SELECT Scrape_Date, product_code,buy_box_price FROM CC_I2O_DATA_REVENUE_LAKE.platform_non_amazon WHERE  marketplace ='bhphotovideo' and reporting_range ='Daily' and period=(select date_sub(CURRENT_DATE, INTERVAL 1 day) from CC_I2O_DATA_REPO.last_load_run)) b on a.product_code = b.product_code where a.org_type='Amazon_3P'  order by  buy_box_price  desc limit 5
PAP_BHPPHOTOVIDEO_PRICE3P_columns=product_code,bbxprice
PAP_AMAZON_PRICE3P=select product_code,round(avg(price)) as amazonprice from(  select distinct  a.product_code, case when b.price is null then 0 else price end as price   from (select distinct  product_code from  `CC_I2O_DATA_REPO.final_product_master_filtered` where org_type ='Amazon_3P' and multiplatform_enabled is true ) a left join (SELECT distinct  product_code , round(avg((cast(reseller_price  as float64)))) price from CC_I2O_DATA_REVENUE_LAKE.reseller_hstry_data  where  period=(select date_sub(CURRENT_DATE, INTERVAL 1 day)) and Reseller_Name='Amazon.com'  group by period,product_code,reseller_price) b on a.product_code =b.product_code )group by product_code  order by amazonprice desc limit 5
PAP_AMAZON_PRICE3P_columns=product_code,amazonprice
PAP_AMAZONBBX_PRICE3P=select product_code,round(avg(buy_box_price)) as buy_box_price from(select a.product_code, case when b.price is null then 0 else price end as buy_box_price   from (select distinct product_code from `CC_I2O_DATA_REPO.final_product_master_filtered`   where org_type ='Amazon_3P' AND  multiplatform_enabled is true ) a left join (SELECT product_code , round(coalesce((cast(buy_box_price  as float64)),0)) price from CC_I2O_DATA_REVENUE_LAKE.product_pricing_hstry_data  WHERE reporting_range ='Daily' and period=(select date_sub(CURRENT_DATE, INTERVAL 1 day) from CC_I2O_DATA_REPO.last_load_run)) b on a.product_code =b.product_code) group by product_code  order by buy_box_price desc LIMIT 5
PAP_AMAZONBBX_PRICE3P_columns=product_code,buy_box_price
YOUR_PRICE=
YOUR_PRICE_columns=

UNSCRAPED_EXPECTED_DATE3P=SELECT CURRENT_DATE() today, DATE_ADD(CURRENT_DATE(), INTERVAL -1 DAY) yesterday
UNSCRAPED_EXPECTED_DATE3P_columns=today,yesterday
DAILY_SCRAPPED3P=SELECT distinct A.product_code,count(distinct A.marketplace) scrapecount  FROM CC_I2O_DATA_REVENUE_LAKE.platform_non_amazon A left join `CC_I2O_DATA_REPO.final_product_master_filtered` M on A.product_code =M.product_code   where A.period=(select date_sub(CURRENT_DATE, INTERVAL 1 day)) and A.reporting_range='Daily' and M.org_type='Amazon_3P' and A.product_code is not null  group by product_code,scrape_date order by product_code asc limit 5
DAILY_SCRAPPED3P_columns=product_code,scrapecount
DAILY_UNSCRAPPED3P=SELECT distinct A.product_code,4-count(distinct A.marketplace) unscrapecount  FROM CC_I2O_DATA_REVENUE_LAKE.platform_non_amazon A left join `CC_I2O_DATA_REPO.final_product_master_filtered` M on A.product_code =M.product_code   where M.org_type='Amazon_3P' and A.period=(select date_sub(CURRENT_DATE, INTERVAL 1 day)) and A.reporting_range='Daily' and M.multiplatform_enabled is true and A.product_code is not null group by product_code,scrape_date  order by  product_code asc limit 5
DAILY_UNSCRAPPED3P_columns=product_code,unscrapecount










